{"version":3,"sources":["component/TaskForm.js","component/TaskSearch.js","component/TaskSort.js","component/TaskControl.js","component/TaskItem.js","component/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","UNSAFE_componentWillReceiveProps","nextProps","task","setState","id","name","status","onCloseForm","onHandleChange","event","target","value","onSubmit","preventDefault","state","clearState","this","title","trim","className","onClick","type","onChange","Component","TaskSearch","GetValue","GetSearch","onSearch","keyword","placeholder","TaskSort","SortField","fByName","fSort","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","sortBy","sortVal","TaskControl","TaskItem","UPDStatus","onUpdateStatus","DelTask","onDelete","onUpdate","index","TaskList","onGetValue","onFilter","filterName","filterStatus","tasks","lstItem","map","key","App","onToggle","isDspForm","tskEdit","onShowForm","UpdateData","obj","i","findIndex","generateID","push","localStorage","setItem","JSON","stringify","t","result","forEach","DeleteTask","splice","UpdateItem","FilterValue","filName","filStatus","parseInt","srch","FilterSearch","keyfil","GetSort","getItem","parse","Math","floor","random","toString","substring","s4","filter","toLowerCase","indexOf","sort","a","b","elmTaskForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d97c714.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            id : ' ',\r\n            name : ' ',\r\n            status : false\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillMount(){\r\n        if (this.props.task !== null){\r\n            this.setState({\r\n                id : this.props.task.id,\r\n                name : this.props.task.name,\r\n                status : this.props.task.status\r\n            });\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps = (nextProps) =>{\r\n        if (nextProps.task !== null){\r\n            this.setState({\r\n                id : nextProps.task.id,\r\n                name : nextProps.task.name,\r\n                status : nextProps.task.status\r\n            });\r\n        }else{\r\n            this.setState({\r\n                id : ' ',\r\n                name : ' ',\r\n                status : false\r\n            });\r\n        }\r\n    }\r\n\r\n    onCloseForm = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    onHandleChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        if (name === 'status'){\r\n            value = target.value === 'true' ? true : false\r\n        }\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state)\r\n        this.clearState();\r\n        this.onCloseForm();\r\n    }\r\n\r\n    clearState = () => {\r\n        this.setState({\r\n            id : ' ',\r\n            name : '',\r\n            status : false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var title = this.state.id.trim() !== '' ? 'Cập Nhật Công Việc' : 'Thêm Công Việc';\r\n        return (\r\n            <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n                <div className=\"panel panel-warning\">\r\n                    <div className=\"panel-heading\">\r\n                        <div className=\"panel-title\">\r\n                            {title}\r\n                            <span className=\"text-right\">\r\n                                <span className=\"fa fa-times-circle\" onClick={this.onCloseForm}></span>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"panel-body\">\r\n                        <form onSubmit={this.onSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <label>Tên :</label>\r\n                                <input type=\"text\" className=\"form-control\" name=\"name\" value={this.state.name} onChange={this.onHandleChange}></input>\r\n                            </div>\r\n                            <label>Trạng Thái :</label>\r\n                            <select className=\"form-control\" name=\"status\" value={this.state.status} onChange={this.onHandleChange}>\r\n                                <option value={true}>Kích Hoạt</option>\r\n                                <option value={false}>Ẩn</option>\r\n                            </select><br/>\r\n                            <div className=\"text-center\">\r\n                                <button type=\"submit\" className=\"btn btn-warning\">\r\n                                    <span className=\"fa fa-plus-circle mr-5\"></span> Lưu Lại\r\n                                </button>&nbsp;\r\n                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.clearState}>\r\n                                    <span className=\"fa fa-times-circle mr-5\"></span> Huỷ Bỏ\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            );\r\n        }  \r\n    }\r\n\r\nexport default TaskForm;\r\n","import React, {Component} from 'react';\r\n\r\nclass TaskSearch extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            keyword : ' '\r\n        }\r\n    }\r\n\r\n    GetValue = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    GetSearch = () =>{\r\n        this.props.onSearch(this.state.keyword);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"input-group\">\r\n                    <input name=\"keyword\" type=\"text\" className=\"form-control\" placeholder=\"Nhập từ khoá...\" onChange={this.GetValue}></input>\r\n                    <span className=\"input-group-btn\">\r\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={this.GetSearch}>\r\n                            <span className=\"fa fa-search mr-5\"></span> Tìm\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            );\r\n        }  \r\n    }\r\n\r\nexport default TaskSearch;\r\n","import React, {Component} from 'react';\r\n\r\nclass TaskSort extends Component {\r\n\r\n    SortField = (fByName, fSort) => {\r\n        this.props.onSort(fByName, fSort);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"dropdown\">\r\n                    <button type=\"button\" className=\"btn btn-primary dropdown-toggle dropdown-toggle-split\"  id=\"dropdownMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                        Sắp Xếp <span className=\"fa fa-caret-down ml-5\"></span>\r\n                    </button>\r\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu\">\r\n                        <li onClick={ () => this.SortField('name', 1)}>\r\n                            <a role=\"button\">\r\n                                <span className=\"fa fa-sort-alpha-asc mr-5\">Tên A-Z</span>\r\n                                <i className={(this.props.sortBy === 'name' && this.props.sortVal === 1) ? 'fa fa-check text-right' : ''}></i>\r\n                            </a>\r\n                        </li>\r\n                        <li onClick={ () => this.SortField('name', -1)}>\r\n                            <a role=\"button\">\r\n                                <span className=\"fa fa-sort-alpha-desc mr-5\">Tên Z-A</span>\r\n                                <i className={(this.props.sortBy === 'name' && this.props.sortVal === -1) ? 'fa fa-check text-right' : ''}></i>\r\n                            </a>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\"></li>\r\n                        <li onClick={ () => this.SortField('status', 1)}>\r\n                            <a role=\"button\">\r\n                                Trạng Thái Kích Hoạt\r\n                                <i className={(this.props.sortBy === 'status' && this.props.sortVal === 1) ? 'fa fa-check text-right' : ''}></i>\r\n                            </a>\r\n                        </li>\r\n                        <li onClick={ () => this.SortField('status', -1)}>\r\n                            <a role=\"button\">\r\n                                Trạng Thái Ẩn\r\n                                <i className={(this.props.sortBy === 'status' && this.props.sortVal === -1) ? 'fas fa-check text-right' : ''}></i>\r\n                            </a>\r\n                        </li>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            );\r\n        }  \r\n    }\r\n\r\nexport default TaskSort;\r\n","import React, {Component} from 'react';\r\nimport TaskSearch from './TaskSearch';\r\nimport TaskSort from './TaskSort';\r\n\r\nclass TaskControl extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <TaskSearch onSearch={this.props.onSearch}/>\r\n                <TaskSort onSort={this.props.onSort} sortBy={this.props.sortBy} sortVal={this.props.sortVal}/>\r\n            </div>\r\n            );\r\n        }  \r\n    }\r\n\r\nexport default TaskControl;\r\n","import React, {Component} from 'react';\r\n\r\nclass TaskItem extends Component {\r\n\r\n    UPDStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id);\r\n    }\r\n\r\n    DelTask = () => {\r\n        this.props.onDelete(this.props.task.id);\r\n    }\r\n\r\n    onUpdate = () => {\r\n        this.props.onUpdate(this.props.task.id);\r\n    }\r\n\r\n    render() {\r\n        var {task, index} = this.props;\r\n        return (\r\n            <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{task.name}</td>\r\n                <td className=\"text-center\">\r\n                    <span \r\n                        className={task.status ? 'label label-success' : 'label label-danger'}\r\n                        onClick={this.UPDStatus}\r\n                    >{task.status ? 'Kích Hoạt' : 'Ẩn'}</span>\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button type=\"button\" className=\"btn btn-warning\" onClick={this.onUpdate}>\r\n                        <span className=\"fa fa-pencil mr-5\"></span> Sửa\r\n                    </button>\r\n                    &nbsp;\r\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={this.DelTask}>\r\n                        <span className=\"fa fa-trash mr-5\"></span> Xoá\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n            );\r\n        }  \r\n    }\r\n\r\nexport default TaskItem;\r\n","import React, {Component} from 'react';\r\nimport TaskItem from './TaskItem';\r\n\r\nclass TaskList extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            filterName : ' ',\r\n            filterStatus : 0  //0: tất cả, 1: Kích Hoạt, 2: Ẩn\r\n        }\r\n    }\r\n\r\n    onGetValue = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n        this.props.onFilter(\r\n            name === 'filterName' ? value : this.state.filterName,\r\n            name === 'filterStatus' ? value : this.state.filterStatus\r\n        )\r\n    }\r\n\r\n    render() {\r\n        var {tasks} = this.props;\r\n        var {filterName, filterStatus} = this.state;\r\n        var lstItem = tasks.map((task, index) => {\r\n            return <TaskItem key={task.id} index={index} task={task} \r\n                                onUpdateStatus={this.props.onUpdateStatus} onDelete={this.props.onDelete} onUpdate={this.props.onUpdate}/>\r\n        });\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                    <table className=\"table table-bordered table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"text-center\">STT</th>\r\n                                <th className=\"text-center\">Tên</th>\r\n                                <th className=\"text-center\">Trạng Thái</th>\r\n                                <th className=\"text-center\">Hành Động</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td>\r\n                                    <input type=\"text\" className=\"form-control\" name=\"filterName\" value={filterName} onChange={this.onGetValue}></input>\r\n                                </td>\r\n                                <td>\r\n                                    <select className=\"form-control\" name=\"filterStatus\" value={filterStatus} onChange={this.onGetValue}>\r\n                                        <option value={0}>Tất cả</option>\r\n                                        <option value={1}>Kích Hoạt</option>\r\n                                        <option value={2}>Ẩn</option>\r\n                                    </select>\r\n                                </td>\r\n                                <td></td>\r\n                            </tr>\r\n                            {lstItem}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            );\r\n        }  \r\n    }\r\n\r\nexport default TaskList;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport TaskForm from './component/TaskForm';\nimport TaskControl from './component/TaskControl';\nimport TaskList from './component/TaskList';\nimport {findIndex, filter} from 'lodash';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            tasks : [], // id, name, status\n            isDspForm : false,\n            tskEdit : null,\n            srch : {\n                name : ' ',\n                status : 0\n            },\n            keyword : ' ',\n            sortBy : 'name',\n            sortVal : 0 //0 Asc, 1 Desc\n        }\n    }\n\n    UNSAFE_componentWillMount(){\n        if (localStorage && localStorage.getItem('tasks')){\n            var tasks = JSON.parse(localStorage.getItem('tasks'));\n            this.setState({\n                tasks : tasks\n            });\n        }\n    }\n\n    s4(){\n        return Math.floor((1*Math.random())* 0x10000).toString(16).substring(1);\n    }\n\n    generateID(){\n        return this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4();\n    }\n\n    onToggle = () => {\n        if (this.state.isDspForm && this.state.tskEdit !== null){\n            this.setState({\n                tskEdit : null\n            });\n        }else{\n            this.setState({\n                isDspForm : !this.state.isDspForm\n            });\n        }\n    }\n\n    onShowForm = () => {\n        this.setState({\n            isDspForm : true\n        });\n    }\n\n    onCloseForm = () => {\n        this.setState({\n            isDspForm : false,\n            tskEdit : null\n        });\n    }\n\n    UpdateData = (obj) => {\n        var {tasks} = this.state;\n        var i = this.findIndex(obj.id);\n        if (i === -1){\n            obj.id = this.generateID();\n            tasks.push(obj);\n        }\n        else{\n            tasks[i] = obj;\n        }\n        this.setState({\n            tasks : tasks\n        });\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n        this.setState({\n            tskEdit : null\n        });\n    }\n\n    UPDStatus = (id) => {\n        var {tasks} = this.state;\n        //var i = this.findIndex(id);\n        var i = findIndex(tasks, (t) => { return t.id == id; });\n        if (i !== -1){\n            tasks[i].status = !tasks[i].status;\n            this.setState({\n                tasks : tasks\n            });\n            localStorage.setItem('tasks', JSON.stringify(tasks));\n        }\n    }\n\n    findIndex = (id) => {\n        var {tasks} = this.state;\n        var result = -1\n        tasks.forEach((task, index) => {\n            if (task.id === id){\n                result = index;\n            }\n        });\n        return result;\n    }\n\n    DeleteTask = (id) => {\n        var {tasks} = this.state;\n        var i = this.findIndex(id);\n        if (i !== -1){\n            tasks.splice(i);\n            this.setState({\n                tasks : tasks\n            });\n            localStorage.setItem('tasks', JSON.stringify(tasks));\n        }\n        this.onCloseForm();\n    }\n\n    UpdateItem = (id) => {\n        var {tasks} = this.state;\n        var i = this.findIndex(id);\n        var tskEdit = tasks[i];\n        if (i !== -1){\n            this.setState({\n                tskEdit : tskEdit\n            });\n        }\n        this.onShowForm();\n    }\n\n    FilterValue = (filName, filStatus) => {\n        filStatus = parseInt(filStatus, 10);\n        this.setState({\n            srch : {\n                name : filName,\n                status : filStatus\n            }\n        });\n    }\n\n    FilterSearch = (keyfil) => {\n        this.setState({\n            keyword : keyfil\n        });\n    }\n\n    GetSort = (sortBy, sortVal) => {\n        sortVal = parseInt(sortVal, 10);\n        this.setState({\n            sortBy : sortBy,\n            sortVal : sortVal\n        });\n    }\n\n    render() {\n        var { tasks , isDspForm, srch , keyword , sortBy, sortVal} = this.state;\n        if (srch){\n            if (srch.name){\n                tasks = tasks.filter((task) => {\n                    return task.name.toLowerCase().indexOf(srch.name) !== -1;\n                });\n                \n            }\n            if (srch.status !== 0){\n                tasks = tasks.filter((task) => {\n                    return task.status === (srch.status === 1 ? true : false);       \n                });\n            }\n            if (keyword){\n                tasks = filter(tasks, (t) => { return t.name.toLowerCase().indexOf(keyword) !== -1; });\n            }\n        }\n        if (sortBy === 'name'){\n            tasks.sort((a, b) => {\n                if(a.name > b.name) return sortVal;\n                else if (a.name < b.name) return -sortVal;\n                else return 0;\n            });\n        }else{\n            tasks.sort((a, b) => {\n                if(a.status > b.status) return -sortVal;\n                else if (a.status < b.status) return sortVal;\n                else return 0;\n            });\n        }\n        \n        var elmTaskForm = isDspForm ? \n                            <TaskForm onCloseForm={this.onCloseForm} onSubmit={this.UpdateData} task={this.state.tskEdit}\n                            /> \n                            : '';\n        return (\n                <div className=\"container\">\n                    <div className=\"text-center\">\n                        <h1>Quản lý Công Việc</h1><hr/>\n                    </div>\n                    <div className=\"row\">\n                        {/* Thêm Công Việc */}\n                        {elmTaskForm}\n                        <div className={isDspForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.onToggle}>\n                                <span className=\"fa fa-plus mr-5\"></span> Thêm Công Việc\n                            </button>\n                            <TaskControl onSearch={this.FilterSearch} onSort={this.GetSort} sortBy={sortBy} sortVal={sortVal}/>\n                            {/* List */}\n                            <TaskList tasks={tasks} onUpdateStatus={this.UPDStatus} \n                                        onDelete={this.DeleteTask} onUpdate={this.UpdateItem} onFilter={this.FilterValue}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }  \n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}